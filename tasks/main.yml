---

- name: Ensure SSH home dir exists
  file:
    path: '{{ ssh_home }}'
    owner: '{{ owner }}'
    mode: 0700

- name: Ensure SSH config exists
  file:
    path: '{{ ssh_home }}/config'
    state: touch
    owner: '{{ owner }}'
    mode: 0700
  changed_when: false

- name: Ensure there is a public key
  shell: ssh-keygen -f {{ ssh_private_key }} -N ''
  args:
    creates: '{{ ssh_private_key }}'

- name: Ensure the keys have restricted permissions
  file:
    path: '{{ item }}'
    owner: '{{ owner }}'
    mode: 0600
  with_items:
  - '{{ ssh_private_key }}'
  - '{{ ssh_public_key }}'

# Just for debugging.
- name: enable ssh-agent
  shell: echo "ssh-agent = $(ssh-agent)"
  when: '"SSH_AUTH_SOCK" in ansible_env'

- name: enable ssh-agent
  shell: eval $(ssh-agent)
  when: '"SSH_AUTH_SOCK" in ansible_env'

- name: Ensure SSH to containers is permissive
  blockinfile:
    dest: '{{ ssh_home }}/config'
    block: |
      Host *.lxc
          # No need for security for disposable test containers
          UserKnownHostsFile /dev/null
          StrictHostKeyChecking no
          User root
      Host *.lxd
          # No need for security for disposable test containers
          UserKnownHostsFile /dev/null
          StrictHostKeyChecking no
          User root

- name: Drop containers
  lxc_container:
    name: '{{ item.split(".")[0] }}'
    state: absent
    lxc_path: '{{ hostvars[item].get("lxc_path", lxc_path) }}'
  when: lxc_drop_containers and item.split('.')[-1] in ('lxc', 'lxd')
  with_items: '{{ groups["all"] }}'

- name: Checking if lxc is installed
  shell: hash lxc-create
  register: lxc_installed
  ignore_errors: yes

- name: Checking if lxd is installed
  shell: hash lxd
  register: lxd_installed
  ignore_errors: yes

- include: lxc.yml
  tags: lxc
  when: lxc_installed|success

# Disabled until Ansible 2.2 is released because that requires a module that's
# not in 2.1. Use the lxd branch of ansible-role-boot if you need lxd support.
#- include: lxd.yml
#  tags: lxd
#  when: lxd_installed|success
